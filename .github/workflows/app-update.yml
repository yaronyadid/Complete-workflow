name: Build, Test, Scan, and Push to ECR

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - master
  #   paths:
  #     - 'my-app/**'

jobs:
  build_test_scan_push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: my-app

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python -m pytest test-app.py

      - name: Install Trivy scanner
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Dockerfile for vulnerabilities
        run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: docker build -t my-flask-app .

      - name: Tag Docker image
        run: docker tag my-flask-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-flask-app:${{ github.sha }}

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-flask-app:${{ github.sha }}
      
      # - name: Deploy new image on EC2 via SSM
      #   run: |
      #     aws ssm send-command \
      #       --targets "Key=tag:Name,Values=App-Server" \
      #       --document-name "AWS-RunShellScript" \
      #       --comment "Deploy latest Flask app container" \
      #       --parameters 'commands=["docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-flask-app:${{ github.sha }}","docker stop myapp || true","docker rm myapp || true","docker run -d --name myapp -p 8080:8080 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-flask-app:${{ github.sha }}"]' \
      #       --region eu-west-1
      - name: Deploy new image on EC2 via SSM
        run: |
          aws ssm send-command \
            --targets "Key=tag:Name,Values=App-Server" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy latest Flask app container" \
            --parameters 'commands=["sudo -u ec2-user bash -c \"export XDG_RUNTIME_DIR=/run/user/$(id -u ec2-user) && export PATH=/home/ec2-user/bin:$PATH && export DOCKER_HOST=unix:///run/user/$(id -u ec2-user)/docker.sock && aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com && docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-flask-app:${{ github.sha }} && docker stop myapp || true && docker rm myapp || true && docker run -d --name myapp --user 1000:1000 -p 8080:8080 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-flask-app:${{ github.sha }}\""]' \
            --region ${{ secrets.AWS_REGION }}